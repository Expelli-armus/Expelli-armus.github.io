<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/04/08/IF%20ANYTHING%20HAPENS%20I%20LOVE%20YOU/</url>
    <content><![CDATA[<hr>
<h1 id="IF-ANYTHING-HAPENS-I-LOVE-YOU"><a href="#IF-ANYTHING-HAPENS-I-LOVE-YOU" class="headerlink" title="IF ANYTHING HAPENS I LOVE YOU"></a>IF ANYTHING HAPENS I LOVE YOU</h1><p>真相，还是交给你自己去看。 谁也无法彻底走进别人的悲痛。 大多数时候，我们的感动和醒悟，都只是匆忙地掠过别人的一生。 但就是一眼。 也足以成为，彼此留存一生的信物。</p>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/01/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>00x1位运算</title>
    <url>/2023/08/03/00x1%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="00x1-位运算"><a href="#00x1-位运算" class="headerlink" title="00x1 位运算"></a>00x1 位运算</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">与</th>
<th style="text-align:center">或</th>
<th style="text-align:center">非</th>
<th style="text-align:center">异或</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">\</td>
<td style="text-align:center"></td>
<td style="text-align:center">~</td>
<td>xor</td>
</tr>
</tbody>
</table>
</div>
<h3 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h3><p>左移:1&lt;&lt;n, n&lt;&lt;1</p>
<p>算数右移:向下取整（-3）&gt;&gt;1=-2, 3&gt;&gt;1=1</p>
<p>而整数/2在c++中实现“除以二向0取整”，即先取整再添加符号</p>
<h2 id="移位运算-1"><a href="#移位运算-1" class="headerlink" title="移位运算"></a>移位运算</h2><h3 id="64位整数乘法"><a href="#64位整数乘法" class="headerlink" title="64位整数乘法"></a>64位整数乘法</h3><p>求$a*b mod p$的值，其中$1\le a,b,p\le 10^{18}$。</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>类似快速幂的思想</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;b;b&gt;&gt;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(ans+a)%p;<span class="comment">//个位是奇数就直接加a</span></span><br><span class="line">		a=a*<span class="number">2</span>%p;<span class="comment">//将b的阶数转移到a上</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>利用$a<em>b mod p=a</em>b-\lfloor a<em>b/p\rfloor </em>p$(带余除法)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b,ll c)</span></span>&#123;</span><br><span class="line">	a%=p;b%=p;</span><br><span class="line">    ll c=(ld)a*b/p;</span><br><span class="line">    ll ans=a*b-c*p;</span><br><span class="line">    <span class="keyword">if</span>(ans&lt;<span class="number">0</span>)ans+=p;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ans&gt;=p)ans-=p;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二进制状态压缩"><a href="#二进制状态压缩" class="headerlink" title="二进制状态压缩"></a>二进制状态压缩</h2><p>将一个长为m的bool数组用一个m位二进制整数表示并存储的办法。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>运算</th>
</tr>
</thead>
<tbody>
<tr>
<td>取第k位</td>
<td>(n&gt;&gt;k)&amp;1</td>
</tr>
<tr>
<td>取0~k-1位（即后k位）</td>
<td>n&amp;(1&lt;&lt;k-1)</td>
</tr>
<tr>
<td>第k位取反</td>
<td>n xor 1&lt;&lt;k</td>
</tr>
<tr>
<td>第k位赋值为1</td>
<td>n\</td>
<td>(1&lt;&lt;k)</td>
</tr>
<tr>
<td>第k位赋值为0</td>
<td>n&amp;(~(1&lt;&lt;k))</td>
</tr>
</tbody>
</table>
</div>
<h3 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h3><p>给定一张n($n\le 20$)个点的带权无向图，点从0~n-1标号，求起点0到终点n-1的最短Hamilton路径(从0到n-1经过每个点恰一次)。</p>
<p>很容易想到本题的一种“朴素”做法，即穷举，时间复杂度O(n<em>n!),利用二进制状态压缩DP可以优化到$O(n^2 </em>2^n)$。</p>
<p>用一个n位二进制数表示点的经过状态。用F[i,j]表示点的经过状态为i，且目前处于点j的最短路径。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> f[<span class="number">1</span>&lt;&lt;<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hamilton</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> weight[<span class="number">20</span>][<span class="number">20</span>])</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;<span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;<span class="keyword">if</span>((i^<span class="number">1</span>&lt;&lt;j)&gt;&gt;k&amp;<span class="number">1</span>)</span><br><span class="line">                f[i][j]=<span class="built_in">min</span>(f[i][j],f[i^<span class="number">1</span>&lt;&lt;j][k]+weight[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">1</span>&lt;&lt;n<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="例题-起床困难综合症"><a href="#例题-起床困难综合症" class="headerlink" title="[例题]起床困难综合症"></a>[例题]起床困难综合症</h3>]]></content>
      <categories>
        <category>算法竞赛进阶指南</category>
      </categories>
  </entry>
  <entry>
    <title>第一章 计算机系统概述</title>
    <url>/2023/10/25/ICS/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h1>]]></content>
      <categories>
        <category>ICS</category>
      </categories>
  </entry>
  <entry>
    <title>第四章 程序的链接</title>
    <url>/2023/10/27/ICS/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ICS</category>
      </categories>
  </entry>
  <entry>
    <title>第三章 程序转换与机器级表示</title>
    <url>/2023/10/27/ICS/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%A8%8B%E5%BA%8F%E8%BD%AC%E6%8D%A2%E4%B8%8E%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ICS</category>
      </categories>
  </entry>
  <entry>
    <title>JH学习笔记</title>
    <url>/2023/10/25/JH%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="算法基础">2.3算法基础</h1>
<h2 id="字母单词和语言">字母、单词和语言</h2>
<p>所有数据都以符号形式的字符串表示。数据表示的类型通常对算法实现的效率很重要。下面介绍一些形式语言理论的基础。我们不需要过多处理数据表示的细节，因为我们在抽象设计级别上考虑算法，通常不处理实现细节。本节的目标是给出一些定义来确定某些输入数据的表示，从而精确地形式化一些基本算法问题。</p>
<blockquote>
<ul>
<li>任意非空有限集合称为一个字母表。每个字母表<span
class="math inline">\(\sum\)</span>中的元素称为<span
class="math inline">\(\sum\)</span>的一个符号。</li>
<li><span
class="math inline">\(\sum\)</span>的符号组成的有限序列称为单词。0个符号组成空单词<span
class="math inline">\(\lambda\)</span>。</li>
<li><span class="math inline">\(\sum\)</span>生成的单词构成集合<span
class="math inline">\(\sum^*\)</span>。</li>
<li>单词<span class="math inline">\(w\)</span>的长度由<span
class="math inline">\(|w|\)</span>表示。</li>
<li>对每个<span class="math inline">\(a\in \sum\)</span>，<span
class="math inline">\(\#a(w)\)</span>表示<span
class="math inline">\(w\)</span>中<span
class="math inline">\(a\)</span>出现的次数。则<span
class="math inline">\(|w|=\sum\#a(w)\)</span>。</li>
<li>对字母表<span class="math inline">\(\sum\)</span>，<span
class="math display">\[\sum^n=\{x\in\sum||x|=n\}\]</span>，即长度为n的单词构成的集合。</li>
<li>定义<span
class="math display">\[\sum^+=\sum^*-\{\lambda\}\]</span>。</li>
<li>对于字母表<span class="math inline">\(\sum\)</span>的两个单词<span
class="math inline">\(v,w\)</span>，<span
class="math inline">\(vw\)</span>为它们的连接。有<span
class="math inline">\(w^0=\lambda,w^{n+1}=ww^n\)</span>。</li>
<li>如果<span class="math inline">\(w=uzv\)</span>,<span
class="math inline">\(u\)</span>称为<span
class="math inline">\(w\)</span>的前缀，<span
class="math inline">\(v\)</span>称为<span
class="math inline">\(w\)</span>的后缀，<span
class="math inline">\(z\)</span>称为<span
class="math inline">\(w\)</span>的子单词。</li>
<li>对字母表<span class="math inline">\(\sum\)</span>，对<span
class="math inline">\(L\subset \sum^*\)</span>，称<span
class="math inline">\(L\)</span>是<span
class="math inline">\(\sum\)</span>的语言。<span
class="math inline">\(L^c\)</span>称为<span
class="math inline">\(\sum\)</span>下语言<span
class="math inline">\(L\)</span>的补。</li>
<li><span class="math display">\[L_1L_2=\{uv|u\in L_1,v\in
L_2\}\]</span>称为语言的链接。</li>
<li>给出<span
class="math display">\[\sum=\{s_1,s_2,...,s_m\},s_1&lt;s_2&lt;...&lt;s_m\]</span>，则可给出单词的规范排序。先按长度排，长度相同的按照字母的大小排。</li>
</ul>
</blockquote>
<h2 id="算法问题">算法问题</h2>
<p>每个算法都可以看做字母表与字母表的映射。我们从决策问题开始，如果<span
class="math inline">\(A\)</span>是算法，<span
class="math inline">\(x\)</span>是输入，则<span
class="math inline">\(A(x)\)</span>表示输出。</p>
<h3 id="lusigma问题"><span
class="math inline">\(L,U,\Sigma\)</span>问题</h3>
<blockquote>
<p>决策问题：三元组<span
class="math inline">\((L,U,\Sigma)\)</span>确定的<span
class="math inline">\(U\rightarrow \{0,1\}\)</span>的函数。其中<span
class="math inline">\(L\subset U\subset \Sigma^*\)</span>。</p>
<p>Input:<span class="math inline">\(x\in U\)</span>.</p>
<p>Output:<span class="math inline">\(1,x\in L;0,x\notin L.\)</span></p>
<p>在很多问题中<span
class="math inline">\(U=\Sigma\)</span>，此时表示为<span
class="math inline">\((L,\Sigma)\)</span>问题。</p>
</blockquote>
<h4 id="素数测试">素数测试</h4>
<p><span
class="math inline">\((Prim,\Sigma_{bool})\)</span>问题。这是二进制的素数检测，可以通过改变字母表得到k进制的素数检测。</p>
<h4 id="判断相等">判断相等</h4>
<h5 id="eq-pol">EQ-POL</h5>
<blockquote>
<p>Input:素数p，由<span
class="math display">\[X=\{x_1,x_2,...,x_n\}\]</span>生成的两个多项式<span
class="math display">\[p_1,p_2\]</span>。</p>
<p>Output:在<span class="math inline">\(\mathbb{Z}_p\)</span>上<span
class="math inline">\(p_1\equiv p_2\)</span>则输出1，否则输出0。</p>
</blockquote>
<h5 id="eq-1bp">EQ-1BP</h5>
<p>对两个给定的一次性分支程序，两者是否表示相同的布尔函数。</p>
<blockquote>
<p>Input:由布尔变量<span
class="math display">\[X=\{x_1,x_2,...,x_n\}\]</span>给出的布尔函数<span
class="math display">\[B_1,B_2\]</span>。</p>
<p>Output:相等为1，不等为0。</p>
</blockquote>
<h4 id="可满足性">可满足性</h4>
<p><a href="https://zhuanlan.zhihu.com/p/432853785">SAT问题简介 - 知乎
(zhihu.com)</a></p>
<p>设k为一个SAT问题中所有子句的长度上限，称以k为子句长度上限构成的SAT问题为k-SAT问题。</p>
<h4 id="分团问题">分团问题</h4>
<blockquote>
<p>Input: k,G。</p>
<p>Output: G中有<span
class="math inline">\(K_k\)</span>为1，否则为0。</p>
</blockquote>
<h3 id="顶点覆盖问题vcp">顶点覆盖问题(VCP)</h3>
<blockquote>
<p><strong>顶点覆盖 (Vertex Cover):</strong></p>
<p>给定一个无向图G，找到无向图G的点集子集V，使得无向图G中的任何一条边，都与点集子集V的至少一个节点是接触的。</p>
<p><strong>顶点覆盖问题:</strong>
查看无向图G中是否包含一个大小为k满足上述要求的点集子集V。</p>
</blockquote>
<p><span class="math inline">\((VCP,\{0,1,\# \})\)</span>问题。</p>
<p><span class="math display">\[VCP=\{u\#w\in\{0,1,\# \}^+|u\in
\{0,1\}^+且w为一张图存在大小为Number(u)的顶点覆盖 \}\]</span>。</p>
<p>###哈密顿回路</p>
<p><span class="math inline">\((HC,\{0,1,\# \})\)</span>问题。</p>
<p><span class="math display">\[HC=\{ w\in\{0,1,\#
\}^*|w代表一张有哈密顿回路的图 \}\]</span>。</p>
<h4 id="线性规划解的存在性">线性规划解的存在性</h4>
<p><span class="math inline">\(AX=b\)</span>是否有解的问题。</p>
<p>直接给出最终版本：有限域上的线性规划整数解。</p>
<p><span class="math display">\[(Sol-IP_p,\{0,1,...,p-1,\# \}
)\]</span>$问题。</p>
<p><span class="math display">\[Sol-IP_p=\{
&lt;A,b&gt;\in\{0,1,...,p-1,\# \} | \exist X,s.t. AX=b,其中
A是\mathbb{Z}_p上的m\times n矩阵,m、n为正整数，b\in
(\mathbb{Z}_p)^m，X\in (\mathbb{Z}_p)^n. \}\]</span></p>
<h3 id="优化问题">优化问题</h3>
]]></content>
      <categories>
        <category>JH</category>
      </categories>
  </entry>
</search>
